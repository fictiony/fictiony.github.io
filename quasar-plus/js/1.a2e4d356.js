(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[1],{befa:function(t,e,i){"use strict";i.r(e);i("26e9");var s=i("8562"),o=i("3980"),n=i("f9f9");e["default"]={name:"MySplitter",extends:s["a"],mixins:[Object(n["swapProp"])("position","value","input")],props:{value:null,position:{type:Number,default:50},limits2:{type:Array,validator:t=>2===t.length&&("number"===typeof t[0]&&"number"===typeof t[1]&&(t[0]>=0&&t[1]>=0))}},model:{prop:"position"},computed:{computedLimits(){if(this.$el){let t=this.limits2;if(void 0!==t){this.reverse&&(t=[t[1],t[0]]);const e=this.$el.getBoundingClientRect()[this.prop];return t=[t[0],Math.max(t[0],e-t[1])],"%"===this.unit?t.map((t=>t/e*100)):t}}return s["a"].options.computed.computedLimits.call(this)}},watch:{limits2:s["a"].options.watch.limits},methods:{__onResize(){this._computedWatchers.computedLimits.dirty=!0,this.__normalize(this.value,this.computedLimits)}},mounted(){this.$on("input",(t=>{this.value=t}))},render(t){return this.$injectSlot("default","QResizeObserver",[t(o["a"],{props:{debounce:0},on:{resize:this.__onResize}})]),s["a"].options.render.call(this,t)}}}}]);